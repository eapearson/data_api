//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

genome_annotation.thrift_service_get_taxon_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_taxon_args.prototype = {};
genome_annotation.thrift_service_get_taxon_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxon_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_taxon_result.prototype = {};
genome_annotation.thrift_service_get_taxon_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxon_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_assembly_args.prototype = {};
genome_annotation.thrift_service_get_assembly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_assembly_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_assembly_result.prototype = {};
genome_annotation.thrift_service_get_assembly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_assembly_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_feature_types_args.prototype = {};
genome_annotation.thrift_service_get_feature_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_types_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_types_result.prototype = {};
genome_annotation.thrift_service_get_feature_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.success = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString().value;
          this.success.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter25 in this.success)
    {
      if (this.success.hasOwnProperty(iter25))
      {
        iter25 = this.success[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype = {};
genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.feature_type_list = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString().value;
          this.feature_type_list.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_descriptions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter33 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter33))
      {
        iter33 = this.feature_type_list[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype = {};
genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size34 = 0;
        var _rtmp338;
        this.success = {};
        var _ktype35 = 0;
        var _vtype36 = 0;
        _rtmp338 = input.readMapBegin();
        _ktype35 = _rtmp338.ktype;
        _vtype36 = _rtmp338.vtype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          if (_i39 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key40 = null;
          var val41 = null;
          key40 = input.readString().value;
          val41 = input.readString().value;
          this.success[key40] = val41;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_descriptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter42 in this.success)
    {
      if (this.success.hasOwnProperty(kiter42))
      {
        var viter43 = this.success[kiter42];
        output.writeString(kiter42);
        output.writeString(viter43);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_counts_args.prototype = {};
genome_annotation.thrift_service_get_feature_type_counts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.feature_type_list = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = input.readString().value;
          this.feature_type_list.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_counts_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter51 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter51))
      {
        iter51 = this.feature_type_list[iter51];
        output.writeString(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_counts_result.prototype = {};
genome_annotation.thrift_service_get_feature_type_counts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size52 = 0;
        var _rtmp356;
        this.success = {};
        var _ktype53 = 0;
        var _vtype54 = 0;
        _rtmp356 = input.readMapBegin();
        _ktype53 = _rtmp356.ktype;
        _vtype54 = _rtmp356.vtype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          if (_i57 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key58 = null;
          var val59 = null;
          key58 = input.readString().value;
          val59 = input.readI64().value;
          this.success[key58] = val59;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_counts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter60 in this.success)
    {
      if (this.success.hasOwnProperty(kiter60))
      {
        var viter61 = this.success[kiter60];
        output.writeString(kiter60);
        output.writeI64(viter61);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  this.region_list = null;
  this.function_list = null;
  this.alias_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
    if (args.region_list !== undefined) {
      this.region_list = args.region_list;
    }
    if (args.function_list !== undefined) {
      this.function_list = args.function_list;
    }
    if (args.alias_list !== undefined) {
      this.alias_list = args.alias_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_ids_args.prototype = {};
genome_annotation.thrift_service_get_feature_ids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.feature_type_list = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = input.readString().value;
          this.feature_type_list.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size69 = 0;
        var _rtmp373;
        this.region_list = [];
        var _etype72 = 0;
        _rtmp373 = input.readListBegin();
        _etype72 = _rtmp373.etype;
        _size69 = _rtmp373.size;
        for (var _i74 = 0; _i74 < _size69; ++_i74)
        {
          var elem75 = null;
          elem75 = new genome_annotation.Region();
          elem75.read(input);
          this.region_list.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.function_list = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = input.readString().value;
          this.function_list.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size83 = 0;
        var _rtmp387;
        this.alias_list = [];
        var _etype86 = 0;
        _rtmp387 = input.readListBegin();
        _etype86 = _rtmp387.etype;
        _size83 = _rtmp387.size;
        for (var _i88 = 0; _i88 < _size83; ++_i88)
        {
          var elem89 = null;
          elem89 = input.readString().value;
          this.alias_list.push(elem89);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_ids_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter90 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter90))
      {
        iter90 = this.feature_type_list[iter90];
        output.writeString(iter90);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.region_list !== null && this.region_list !== undefined) {
    output.writeFieldBegin('region_list', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.region_list.length);
    for (var iter91 in this.region_list)
    {
      if (this.region_list.hasOwnProperty(iter91))
      {
        iter91 = this.region_list[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.function_list !== null && this.function_list !== undefined) {
    output.writeFieldBegin('function_list', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.function_list.length);
    for (var iter92 in this.function_list)
    {
      if (this.function_list.hasOwnProperty(iter92))
      {
        iter92 = this.function_list[iter92];
        output.writeString(iter92);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.alias_list !== null && this.alias_list !== undefined) {
    output.writeFieldBegin('alias_list', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.alias_list.length);
    for (var iter93 in this.alias_list)
    {
      if (this.alias_list.hasOwnProperty(iter93))
      {
        iter93 = this.alias_list[iter93];
        output.writeString(iter93);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_ids_result.prototype = {};
genome_annotation.thrift_service_get_feature_ids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size94 = 0;
        var _rtmp398;
        this.success = {};
        var _ktype95 = 0;
        var _vtype96 = 0;
        _rtmp398 = input.readMapBegin();
        _ktype95 = _rtmp398.ktype;
        _vtype96 = _rtmp398.vtype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          if (_i99 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key100 = null;
          var val101 = null;
          key100 = input.readString().value;
          var _size102 = 0;
          var _rtmp3106;
          val101 = {};
          var _ktype103 = 0;
          var _vtype104 = 0;
          _rtmp3106 = input.readMapBegin();
          _ktype103 = _rtmp3106.ktype;
          _vtype104 = _rtmp3106.vtype;
          _size102 = _rtmp3106.size;
          for (var _i107 = 0; _i107 < _size102; ++_i107)
          {
            if (_i107 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key108 = null;
            var val109 = null;
            key108 = input.readString().value;
            val109 = input.readString().value;
            val101[key108] = val109;
          }
          input.readMapEnd();
          this.success[key100] = val101;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_ids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter110 in this.success)
    {
      if (this.success.hasOwnProperty(kiter110))
      {
        var viter111 = this.success[kiter110];
        output.writeString(kiter110);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter111));
        for (var kiter112 in viter111)
        {
          if (viter111.hasOwnProperty(kiter112))
          {
            var viter113 = viter111[kiter112];
            output.writeString(kiter112);
            output.writeString(viter113);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_features_args.prototype = {};
genome_annotation.thrift_service_get_features_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.feature_id_list = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readString().value;
          this.feature_id_list.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_features_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter121 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter121))
      {
        iter121 = this.feature_id_list[iter121];
        output.writeString(iter121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_features_result.prototype = {};
genome_annotation.thrift_service_get_features_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size122 = 0;
        var _rtmp3126;
        this.success = {};
        var _ktype123 = 0;
        var _vtype124 = 0;
        _rtmp3126 = input.readMapBegin();
        _ktype123 = _rtmp3126.ktype;
        _vtype124 = _rtmp3126.vtype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          if (_i127 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key128 = null;
          var val129 = null;
          key128 = input.readString().value;
          val129 = input.readString().value;
          this.success[key128] = val129;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_features_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter130 in this.success)
    {
      if (this.success.hasOwnProperty(kiter130))
      {
        var viter131 = this.success[kiter130];
        output.writeString(kiter130);
        output.writeString(viter131);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_proteins_args.prototype = {};
genome_annotation.thrift_service_get_proteins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.feature_id_list = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = input.readString().value;
          this.feature_id_list.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_proteins_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter139 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter139))
      {
        iter139 = this.feature_id_list[iter139];
        output.writeString(iter139);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_proteins_result.prototype = {};
genome_annotation.thrift_service_get_proteins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size140 = 0;
        var _rtmp3144;
        this.success = {};
        var _ktype141 = 0;
        var _vtype142 = 0;
        _rtmp3144 = input.readMapBegin();
        _ktype141 = _rtmp3144.ktype;
        _vtype142 = _rtmp3144.vtype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          if (_i145 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key146 = null;
          var val147 = null;
          key146 = input.readString().value;
          val147 = input.readString().value;
          this.success[key146] = val147;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_proteins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter148 in this.success)
    {
      if (this.success.hasOwnProperty(kiter148))
      {
        var viter149 = this.success[kiter148];
        output.writeString(kiter148);
        output.writeString(viter149);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_locations_args.prototype = {};
genome_annotation.thrift_service_get_feature_locations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size150 = 0;
        var _rtmp3154;
        this.feature_id_list = [];
        var _etype153 = 0;
        _rtmp3154 = input.readListBegin();
        _etype153 = _rtmp3154.etype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          var elem156 = null;
          elem156 = input.readString().value;
          this.feature_id_list.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_locations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter157 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter157))
      {
        iter157 = this.feature_id_list[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_locations_result.prototype = {};
genome_annotation.thrift_service_get_feature_locations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size158 = 0;
        var _rtmp3162;
        this.success = {};
        var _ktype159 = 0;
        var _vtype160 = 0;
        _rtmp3162 = input.readMapBegin();
        _ktype159 = _rtmp3162.ktype;
        _vtype160 = _rtmp3162.vtype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          if (_i163 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key164 = null;
          var val165 = null;
          key164 = input.readString().value;
          var _size166 = 0;
          var _rtmp3170;
          val165 = [];
          var _etype169 = 0;
          _rtmp3170 = input.readListBegin();
          _etype169 = _rtmp3170.etype;
          _size166 = _rtmp3170.size;
          for (var _i171 = 0; _i171 < _size166; ++_i171)
          {
            var elem172 = null;
            elem172 = new genome_annotation.Region();
            elem172.read(input);
            val165.push(elem172);
          }
          input.readListEnd();
          this.success[key164] = val165;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_locations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter173 in this.success)
    {
      if (this.success.hasOwnProperty(kiter173))
      {
        var viter174 = this.success[kiter173];
        output.writeString(kiter173);
        output.writeListBegin(Thrift.Type.STRUCT, viter174.length);
        for (var iter175 in viter174)
        {
          if (viter174.hasOwnProperty(iter175))
          {
            iter175 = viter174[iter175];
            iter175.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_publications_args.prototype = {};
genome_annotation.thrift_service_get_feature_publications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.feature_id_list = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = input.readString().value;
          this.feature_id_list.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_publications_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter183 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter183))
      {
        iter183 = this.feature_id_list[iter183];
        output.writeString(iter183);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_publications_result.prototype = {};
genome_annotation.thrift_service_get_feature_publications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size184 = 0;
        var _rtmp3188;
        this.success = {};
        var _ktype185 = 0;
        var _vtype186 = 0;
        _rtmp3188 = input.readMapBegin();
        _ktype185 = _rtmp3188.ktype;
        _vtype186 = _rtmp3188.vtype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          if (_i189 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key190 = null;
          var val191 = null;
          key190 = input.readString().value;
          val191 = input.readString().value;
          this.success[key190] = val191;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_publications_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter192 in this.success)
    {
      if (this.success.hasOwnProperty(kiter192))
      {
        var viter193 = this.success[kiter192];
        output.writeString(kiter192);
        output.writeString(viter193);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_dna_args.prototype = {};
genome_annotation.thrift_service_get_feature_dna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size194 = 0;
        var _rtmp3198;
        this.feature_id_list = [];
        var _etype197 = 0;
        _rtmp3198 = input.readListBegin();
        _etype197 = _rtmp3198.etype;
        _size194 = _rtmp3198.size;
        for (var _i199 = 0; _i199 < _size194; ++_i199)
        {
          var elem200 = null;
          elem200 = input.readString().value;
          this.feature_id_list.push(elem200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_dna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter201 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter201))
      {
        iter201 = this.feature_id_list[iter201];
        output.writeString(iter201);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_dna_result.prototype = {};
genome_annotation.thrift_service_get_feature_dna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size202 = 0;
        var _rtmp3206;
        this.success = {};
        var _ktype203 = 0;
        var _vtype204 = 0;
        _rtmp3206 = input.readMapBegin();
        _ktype203 = _rtmp3206.ktype;
        _vtype204 = _rtmp3206.vtype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          if (_i207 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key208 = null;
          var val209 = null;
          key208 = input.readString().value;
          val209 = input.readString().value;
          this.success[key208] = val209;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_dna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter210 in this.success)
    {
      if (this.success.hasOwnProperty(kiter210))
      {
        var viter211 = this.success[kiter210];
        output.writeString(kiter210);
        output.writeString(viter211);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_functions_args.prototype = {};
genome_annotation.thrift_service_get_feature_functions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size212 = 0;
        var _rtmp3216;
        this.feature_id_list = [];
        var _etype215 = 0;
        _rtmp3216 = input.readListBegin();
        _etype215 = _rtmp3216.etype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          var elem218 = null;
          elem218 = input.readString().value;
          this.feature_id_list.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_functions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter219 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter219))
      {
        iter219 = this.feature_id_list[iter219];
        output.writeString(iter219);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_functions_result.prototype = {};
genome_annotation.thrift_service_get_feature_functions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size220 = 0;
        var _rtmp3224;
        this.success = {};
        var _ktype221 = 0;
        var _vtype222 = 0;
        _rtmp3224 = input.readMapBegin();
        _ktype221 = _rtmp3224.ktype;
        _vtype222 = _rtmp3224.vtype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          if (_i225 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key226 = null;
          var val227 = null;
          key226 = input.readString().value;
          val227 = input.readString().value;
          this.success[key226] = val227;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_functions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter228 in this.success)
    {
      if (this.success.hasOwnProperty(kiter228))
      {
        var viter229 = this.success[kiter228];
        output.writeString(kiter228);
        output.writeString(viter229);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_aliases_args.prototype = {};
genome_annotation.thrift_service_get_feature_aliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size230 = 0;
        var _rtmp3234;
        this.feature_id_list = [];
        var _etype233 = 0;
        _rtmp3234 = input.readListBegin();
        _etype233 = _rtmp3234.etype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var elem236 = null;
          elem236 = input.readString().value;
          this.feature_id_list.push(elem236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_aliases_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter237 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter237))
      {
        iter237 = this.feature_id_list[iter237];
        output.writeString(iter237);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_aliases_result.prototype = {};
genome_annotation.thrift_service_get_feature_aliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size238 = 0;
        var _rtmp3242;
        this.success = {};
        var _ktype239 = 0;
        var _vtype240 = 0;
        _rtmp3242 = input.readMapBegin();
        _ktype239 = _rtmp3242.ktype;
        _vtype240 = _rtmp3242.vtype;
        _size238 = _rtmp3242.size;
        for (var _i243 = 0; _i243 < _size238; ++_i243)
        {
          if (_i243 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key244 = null;
          var val245 = null;
          key244 = input.readString().value;
          var _size246 = 0;
          var _rtmp3250;
          val245 = [];
          var _etype249 = 0;
          _rtmp3250 = input.readListBegin();
          _etype249 = _rtmp3250.etype;
          _size246 = _rtmp3250.size;
          for (var _i251 = 0; _i251 < _size246; ++_i251)
          {
            var elem252 = null;
            elem252 = input.readString().value;
            val245.push(elem252);
          }
          input.readListEnd();
          this.success[key244] = val245;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_aliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter253 in this.success)
    {
      if (this.success.hasOwnProperty(kiter253))
      {
        var viter254 = this.success[kiter253];
        output.writeString(kiter253);
        output.writeListBegin(Thrift.Type.STRING, viter254.length);
        for (var iter255 in viter254)
        {
          if (viter254.hasOwnProperty(iter255))
          {
            iter255 = viter254[iter255];
            output.writeString(iter255);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_gene_args.prototype = {};
genome_annotation.thrift_service_get_cds_by_gene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.gene_id_list = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readString().value;
          this.gene_id_list.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_gene_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter263 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter263))
      {
        iter263 = this.gene_id_list[iter263];
        output.writeString(iter263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_gene_result.prototype = {};
genome_annotation.thrift_service_get_cds_by_gene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size264 = 0;
        var _rtmp3268;
        this.success = {};
        var _ktype265 = 0;
        var _vtype266 = 0;
        _rtmp3268 = input.readMapBegin();
        _ktype265 = _rtmp3268.ktype;
        _vtype266 = _rtmp3268.vtype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          if (_i269 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key270 = null;
          var val271 = null;
          key270 = input.readString().value;
          val271 = input.readString().value;
          this.success[key270] = val271;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_gene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter272 in this.success)
    {
      if (this.success.hasOwnProperty(kiter272))
      {
        var viter273 = this.success[kiter272];
        output.writeString(kiter272);
        output.writeString(viter273);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_mrna_args.prototype = {};
genome_annotation.thrift_service_get_cds_by_mrna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size274 = 0;
        var _rtmp3278;
        this.mrna_id_list = [];
        var _etype277 = 0;
        _rtmp3278 = input.readListBegin();
        _etype277 = _rtmp3278.etype;
        _size274 = _rtmp3278.size;
        for (var _i279 = 0; _i279 < _size274; ++_i279)
        {
          var elem280 = null;
          elem280 = input.readString().value;
          this.mrna_id_list.push(elem280);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_mrna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter281 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter281))
      {
        iter281 = this.mrna_id_list[iter281];
        output.writeString(iter281);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_mrna_result.prototype = {};
genome_annotation.thrift_service_get_cds_by_mrna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size282 = 0;
        var _rtmp3286;
        this.success = {};
        var _ktype283 = 0;
        var _vtype284 = 0;
        _rtmp3286 = input.readMapBegin();
        _ktype283 = _rtmp3286.ktype;
        _vtype284 = _rtmp3286.vtype;
        _size282 = _rtmp3286.size;
        for (var _i287 = 0; _i287 < _size282; ++_i287)
        {
          if (_i287 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key288 = null;
          var val289 = null;
          key288 = input.readString().value;
          val289 = input.readString().value;
          this.success[key288] = val289;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_mrna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter290 in this.success)
    {
      if (this.success.hasOwnProperty(kiter290))
      {
        var viter291 = this.success[kiter290];
        output.writeString(kiter290);
        output.writeString(viter291);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_args = function(args) {
  this.token = null;
  this.ref = null;
  this.cds_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.cds_id_list !== undefined) {
      this.cds_id_list = args.cds_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_cds_args.prototype = {};
genome_annotation.thrift_service_get_gene_by_cds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size292 = 0;
        var _rtmp3296;
        this.cds_id_list = [];
        var _etype295 = 0;
        _rtmp3296 = input.readListBegin();
        _etype295 = _rtmp3296.etype;
        _size292 = _rtmp3296.size;
        for (var _i297 = 0; _i297 < _size292; ++_i297)
        {
          var elem298 = null;
          elem298 = input.readString().value;
          this.cds_id_list.push(elem298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_cds_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.cds_id_list !== null && this.cds_id_list !== undefined) {
    output.writeFieldBegin('cds_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cds_id_list.length);
    for (var iter299 in this.cds_id_list)
    {
      if (this.cds_id_list.hasOwnProperty(iter299))
      {
        iter299 = this.cds_id_list[iter299];
        output.writeString(iter299);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_cds_result.prototype = {};
genome_annotation.thrift_service_get_gene_by_cds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size300 = 0;
        var _rtmp3304;
        this.success = {};
        var _ktype301 = 0;
        var _vtype302 = 0;
        _rtmp3304 = input.readMapBegin();
        _ktype301 = _rtmp3304.ktype;
        _vtype302 = _rtmp3304.vtype;
        _size300 = _rtmp3304.size;
        for (var _i305 = 0; _i305 < _size300; ++_i305)
        {
          if (_i305 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key306 = null;
          var val307 = null;
          key306 = input.readString().value;
          val307 = input.readString().value;
          this.success[key306] = val307;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_cds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter308 in this.success)
    {
      if (this.success.hasOwnProperty(kiter308))
      {
        var viter309 = this.success[kiter308];
        output.writeString(kiter308);
        output.writeString(viter309);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_mrna_args.prototype = {};
genome_annotation.thrift_service_get_gene_by_mrna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size310 = 0;
        var _rtmp3314;
        this.mrna_id_list = [];
        var _etype313 = 0;
        _rtmp3314 = input.readListBegin();
        _etype313 = _rtmp3314.etype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var elem316 = null;
          elem316 = input.readString().value;
          this.mrna_id_list.push(elem316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_mrna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter317 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter317))
      {
        iter317 = this.mrna_id_list[iter317];
        output.writeString(iter317);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_mrna_result.prototype = {};
genome_annotation.thrift_service_get_gene_by_mrna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size318 = 0;
        var _rtmp3322;
        this.success = {};
        var _ktype319 = 0;
        var _vtype320 = 0;
        _rtmp3322 = input.readMapBegin();
        _ktype319 = _rtmp3322.ktype;
        _vtype320 = _rtmp3322.vtype;
        _size318 = _rtmp3322.size;
        for (var _i323 = 0; _i323 < _size318; ++_i323)
        {
          if (_i323 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key324 = null;
          var val325 = null;
          key324 = input.readString().value;
          val325 = input.readString().value;
          this.success[key324] = val325;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_mrna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter326 in this.success)
    {
      if (this.success.hasOwnProperty(kiter326))
      {
        var viter327 = this.success[kiter326];
        output.writeString(kiter326);
        output.writeString(viter327);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_cds_args.prototype = {};
genome_annotation.thrift_service_get_mrna_by_cds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.gene_id_list = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = input.readString().value;
          this.gene_id_list.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_cds_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter335 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter335))
      {
        iter335 = this.gene_id_list[iter335];
        output.writeString(iter335);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_cds_result.prototype = {};
genome_annotation.thrift_service_get_mrna_by_cds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size336 = 0;
        var _rtmp3340;
        this.success = {};
        var _ktype337 = 0;
        var _vtype338 = 0;
        _rtmp3340 = input.readMapBegin();
        _ktype337 = _rtmp3340.ktype;
        _vtype338 = _rtmp3340.vtype;
        _size336 = _rtmp3340.size;
        for (var _i341 = 0; _i341 < _size336; ++_i341)
        {
          if (_i341 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key342 = null;
          var val343 = null;
          key342 = input.readString().value;
          val343 = input.readString().value;
          this.success[key342] = val343;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_cds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter344 in this.success)
    {
      if (this.success.hasOwnProperty(kiter344))
      {
        var viter345 = this.success[kiter344];
        output.writeString(kiter344);
        output.writeString(viter345);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_gene_args.prototype = {};
genome_annotation.thrift_service_get_mrna_by_gene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.gene_id_list = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = input.readString().value;
          this.gene_id_list.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_gene_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter353 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter353))
      {
        iter353 = this.gene_id_list[iter353];
        output.writeString(iter353);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_gene_result.prototype = {};
genome_annotation.thrift_service_get_mrna_by_gene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size354 = 0;
        var _rtmp3358;
        this.success = {};
        var _ktype355 = 0;
        var _vtype356 = 0;
        _rtmp3358 = input.readMapBegin();
        _ktype355 = _rtmp3358.ktype;
        _vtype356 = _rtmp3358.vtype;
        _size354 = _rtmp3358.size;
        for (var _i359 = 0; _i359 < _size354; ++_i359)
        {
          if (_i359 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key360 = null;
          var val361 = null;
          key360 = input.readString().value;
          val361 = input.readString().value;
          this.success[key360] = val361;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_gene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter362 in this.success)
    {
      if (this.success.hasOwnProperty(kiter362))
      {
        var viter363 = this.success[kiter362];
        output.writeString(kiter362);
        output.writeString(viter363);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
genome_annotation.thrift_serviceClient.prototype = {};
genome_annotation.thrift_serviceClient.prototype.get_taxon = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_taxon(token, ref);
    return this.recv_get_taxon();
  } else {
    var postData = this.send_get_taxon(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_taxon);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_taxon = function(token, ref, callback) {
  this.output.writeMessageBegin('get_taxon', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_taxon_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_taxon = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_taxon_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_taxon failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_assembly = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_assembly(token, ref);
    return this.recv_get_assembly();
  } else {
    var postData = this.send_get_assembly(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_assembly);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_assembly = function(token, ref, callback) {
  this.output.writeMessageBegin('get_assembly', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_assembly_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_assembly = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_assembly_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_assembly failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_types = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_feature_types(token, ref);
    return this.recv_get_feature_types();
  } else {
    var postData = this.send_get_feature_types(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_types);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_types = function(token, ref, callback) {
  this.output.writeMessageBegin('get_feature_types', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_types_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_types = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_types_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_types failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_type_descriptions = function(token, ref, feature_type_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_type_descriptions(token, ref, feature_type_list);
    return this.recv_get_feature_type_descriptions();
  } else {
    var postData = this.send_get_feature_type_descriptions(token, ref, feature_type_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_type_descriptions);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_type_descriptions = function(token, ref, feature_type_list, callback) {
  this.output.writeMessageBegin('get_feature_type_descriptions', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_type_descriptions_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_type_descriptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_type_descriptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_type_descriptions failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_type_counts = function(token, ref, feature_type_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_type_counts(token, ref, feature_type_list);
    return this.recv_get_feature_type_counts();
  } else {
    var postData = this.send_get_feature_type_counts(token, ref, feature_type_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_type_counts);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_type_counts = function(token, ref, feature_type_list, callback) {
  this.output.writeMessageBegin('get_feature_type_counts', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_type_counts_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_type_counts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_type_counts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_type_counts failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_ids = function(token, ref, feature_type_list, region_list, function_list, alias_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_ids(token, ref, feature_type_list, region_list, function_list, alias_list);
    return this.recv_get_feature_ids();
  } else {
    var postData = this.send_get_feature_ids(token, ref, feature_type_list, region_list, function_list, alias_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_ids);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_ids = function(token, ref, feature_type_list, region_list, function_list, alias_list, callback) {
  this.output.writeMessageBegin('get_feature_ids', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_ids_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.region_list = region_list;
  args.function_list = function_list;
  args.alias_list = alias_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_ids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_ids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_ids failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_features = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_features(token, ref, feature_id_list);
    return this.recv_get_features();
  } else {
    var postData = this.send_get_features(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_features);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_features = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_features', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_features_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_features = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_features_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_features failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_proteins = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_proteins(token, ref, feature_id_list);
    return this.recv_get_proteins();
  } else {
    var postData = this.send_get_proteins(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_proteins);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_proteins = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_proteins', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_proteins_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_proteins = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_proteins_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_proteins failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_locations = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_locations(token, ref, feature_id_list);
    return this.recv_get_feature_locations();
  } else {
    var postData = this.send_get_feature_locations(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_locations);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_locations = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_locations', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_locations_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_locations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_locations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_locations failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_publications = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_publications(token, ref, feature_id_list);
    return this.recv_get_feature_publications();
  } else {
    var postData = this.send_get_feature_publications(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_publications);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_publications = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_publications', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_publications_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_publications = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_publications_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_publications failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_dna = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_dna(token, ref, feature_id_list);
    return this.recv_get_feature_dna();
  } else {
    var postData = this.send_get_feature_dna(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_dna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_dna = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_dna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_dna_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_dna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_dna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_dna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_functions = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_functions(token, ref, feature_id_list);
    return this.recv_get_feature_functions();
  } else {
    var postData = this.send_get_feature_functions(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_functions);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_functions = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_functions', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_functions_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_functions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_functions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_functions failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_aliases = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_aliases(token, ref, feature_id_list);
    return this.recv_get_feature_aliases();
  } else {
    var postData = this.send_get_feature_aliases(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_aliases);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_aliases = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_aliases', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_aliases_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_aliases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_aliases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_aliases failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_cds_by_gene = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_cds_by_gene(token, ref, gene_id_list);
    return this.recv_get_cds_by_gene();
  } else {
    var postData = this.send_get_cds_by_gene(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_cds_by_gene);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_cds_by_gene = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_cds_by_gene', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_cds_by_gene_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_cds_by_gene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_cds_by_gene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_cds_by_gene failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_cds_by_mrna = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_cds_by_mrna(token, ref, mrna_id_list);
    return this.recv_get_cds_by_mrna();
  } else {
    var postData = this.send_get_cds_by_mrna(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_cds_by_mrna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_cds_by_mrna = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_cds_by_mrna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_cds_by_mrna_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_cds_by_mrna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_cds_by_mrna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_cds_by_mrna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gene_by_cds = function(token, ref, cds_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gene_by_cds(token, ref, cds_id_list);
    return this.recv_get_gene_by_cds();
  } else {
    var postData = this.send_get_gene_by_cds(token, ref, cds_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gene_by_cds);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gene_by_cds = function(token, ref, cds_id_list, callback) {
  this.output.writeMessageBegin('get_gene_by_cds', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gene_by_cds_args();
  args.token = token;
  args.ref = ref;
  args.cds_id_list = cds_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gene_by_cds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gene_by_cds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gene_by_cds failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gene_by_mrna = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gene_by_mrna(token, ref, mrna_id_list);
    return this.recv_get_gene_by_mrna();
  } else {
    var postData = this.send_get_gene_by_mrna(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gene_by_mrna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gene_by_mrna = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_gene_by_mrna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gene_by_mrna_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gene_by_mrna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gene_by_mrna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gene_by_mrna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_by_cds = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_by_cds(token, ref, gene_id_list);
    return this.recv_get_mrna_by_cds();
  } else {
    var postData = this.send_get_mrna_by_cds(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_by_cds);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_by_cds = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_by_cds', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_by_cds_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_by_cds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_by_cds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_by_cds failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_by_gene = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_by_gene(token, ref, gene_id_list);
    return this.recv_get_mrna_by_gene();
  } else {
    var postData = this.send_get_mrna_by_gene(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_by_gene);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_by_gene = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_by_gene', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_by_gene_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_by_gene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_by_gene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_by_gene failed: unknown result';
};

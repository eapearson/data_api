#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None

from zope.interface import Interface, implements
from twisted.internet import defer
from thrift.transport import TTwisted

class Iface(Interface):
  def get_taxon(token, ref):
    """
    Retrieve the Taxon associated with this GenomeAnnotation.


    Parameters:
     - token
     - ref
    """
    pass

  def get_assembly(token, ref):
    """
    Retrieve the Assembly associated with this GenomeAnnotation.


    Parameters:
     - token
     - ref
    """
    pass

  def get_feature_types(token, ref):
    """
    Retrieve the list of Feature types in this GenomeAnnotation.


    Parameters:
     - token
     - ref
    """
    pass

  def get_feature_type_descriptions(token, ref, feature_type_list):
    """
    Retrieve the descriptions for each Feature type in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_type_list
    """
    pass

  def get_feature_type_counts(token, ref, feature_type_list):
    """
    Retrieve the count of each Feature type in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_type_list
    """
    pass

  def get_feature_ids(token, ref, feature_type_list, region_list, function_list, alias_list):
    """
    Retrieve Feature ids in this GenomeAnnotation, optionally filtered by type, region, function, alias.


    Parameters:
     - token
     - ref
     - feature_type_list
     - region_list
     - function_list
     - alias_list
    """
    pass

  def get_features(token, ref, feature_id_list):
    """
    Retrieve Feature data available in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    pass

  def get_proteins(token, ref, feature_id_list):
    """
    Retrieve Protein data available in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    pass

  def get_feature_locations(token, ref, feature_id_list):
    """
    Retrieve Feature locations in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    pass

  def get_feature_publications(token, ref, feature_id_list):
    """
    Retrieve Feature publications in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    pass

  def get_feature_dna(token, ref, feature_id_list):
    """
    Retrieve Feature DNA sequences in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    pass

  def get_feature_functions(token, ref, feature_id_list):
    """
    Retrieve Feature functions in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    pass

  def get_feature_aliases(token, ref, feature_id_list):
    """
    Retrieve Feature aliases in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    pass

  def get_cds_by_gene(token, ref, gene_id_list):
    """
    Retrieve the CDS id for each Gene id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - gene_id_list
    """
    pass

  def get_cds_by_mrna(token, ref, mrna_id_list):
    """
    Retrieve the CDS id for each mRNA id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - mrna_id_list
    """
    pass

  def get_gene_by_cds(token, ref, cds_id_list):
    """
    Retrieve the Gene id for each CDS id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - cds_id_list
    """
    pass

  def get_gene_by_mrna(token, ref, mrna_id_list):
    """
    Retrieve the Gene id for each mRNA id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - mrna_id_list
    """
    pass

  def get_mrna_by_cds(token, ref, gene_id_list):
    """
    Retrieve the mRNA id for each CDS id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - gene_id_list
    """
    pass

  def get_mrna_by_gene(token, ref, gene_id_list):
    """
    Retrieve the mRNA id for each Gene id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - gene_id_list
    """
    pass


class Client:
  implements(Iface)

  def __init__(self, transport, oprot_factory):
    self._transport = transport
    self._oprot_factory = oprot_factory
    self._seqid = 0
    self._reqs = {}

  def get_taxon(self, token, ref):
    """
    Retrieve the Taxon associated with this GenomeAnnotation.


    Parameters:
     - token
     - ref
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_taxon, token, ref)
    d.addCallbacks(
      callback=self.cb_send_get_taxon,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_taxon,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_taxon(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_taxon(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_taxon(self, token, ref):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_taxon', TMessageType.CALL, self._seqid)
    args = get_taxon_args()
    args.token = token
    args.ref = ref
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_taxon(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_taxon_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_taxon failed: unknown result"))

  def get_assembly(self, token, ref):
    """
    Retrieve the Assembly associated with this GenomeAnnotation.


    Parameters:
     - token
     - ref
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_assembly, token, ref)
    d.addCallbacks(
      callback=self.cb_send_get_assembly,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_assembly,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_assembly(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_assembly(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_assembly(self, token, ref):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_assembly', TMessageType.CALL, self._seqid)
    args = get_assembly_args()
    args.token = token
    args.ref = ref
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_assembly(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_assembly_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_assembly failed: unknown result"))

  def get_feature_types(self, token, ref):
    """
    Retrieve the list of Feature types in this GenomeAnnotation.


    Parameters:
     - token
     - ref
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_types, token, ref)
    d.addCallbacks(
      callback=self.cb_send_get_feature_types,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_types,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_types(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_types(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_types(self, token, ref):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_types', TMessageType.CALL, self._seqid)
    args = get_feature_types_args()
    args.token = token
    args.ref = ref
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_types(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_types_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_types failed: unknown result"))

  def get_feature_type_descriptions(self, token, ref, feature_type_list):
    """
    Retrieve the descriptions for each Feature type in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_type_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_type_descriptions, token, ref, feature_type_list)
    d.addCallbacks(
      callback=self.cb_send_get_feature_type_descriptions,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_type_descriptions,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_type_descriptions(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_type_descriptions(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_type_descriptions(self, token, ref, feature_type_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_type_descriptions', TMessageType.CALL, self._seqid)
    args = get_feature_type_descriptions_args()
    args.token = token
    args.ref = ref
    args.feature_type_list = feature_type_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_type_descriptions(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_type_descriptions_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_type_descriptions failed: unknown result"))

  def get_feature_type_counts(self, token, ref, feature_type_list):
    """
    Retrieve the count of each Feature type in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_type_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_type_counts, token, ref, feature_type_list)
    d.addCallbacks(
      callback=self.cb_send_get_feature_type_counts,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_type_counts,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_type_counts(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_type_counts(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_type_counts(self, token, ref, feature_type_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_type_counts', TMessageType.CALL, self._seqid)
    args = get_feature_type_counts_args()
    args.token = token
    args.ref = ref
    args.feature_type_list = feature_type_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_type_counts(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_type_counts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_type_counts failed: unknown result"))

  def get_feature_ids(self, token, ref, feature_type_list, region_list, function_list, alias_list):
    """
    Retrieve Feature ids in this GenomeAnnotation, optionally filtered by type, region, function, alias.


    Parameters:
     - token
     - ref
     - feature_type_list
     - region_list
     - function_list
     - alias_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_ids, token, ref, feature_type_list, region_list, function_list, alias_list)
    d.addCallbacks(
      callback=self.cb_send_get_feature_ids,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_ids,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_ids(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_ids(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_ids(self, token, ref, feature_type_list, region_list, function_list, alias_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_ids', TMessageType.CALL, self._seqid)
    args = get_feature_ids_args()
    args.token = token
    args.ref = ref
    args.feature_type_list = feature_type_list
    args.region_list = region_list
    args.function_list = function_list
    args.alias_list = alias_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_ids(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_ids_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_ids failed: unknown result"))

  def get_features(self, token, ref, feature_id_list):
    """
    Retrieve Feature data available in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_features, token, ref, feature_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_features,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_features,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_features(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_features(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_features(self, token, ref, feature_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_features', TMessageType.CALL, self._seqid)
    args = get_features_args()
    args.token = token
    args.ref = ref
    args.feature_id_list = feature_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_features(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_features_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_features failed: unknown result"))

  def get_proteins(self, token, ref, feature_id_list):
    """
    Retrieve Protein data available in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_proteins, token, ref, feature_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_proteins,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_proteins,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_proteins(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_proteins(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_proteins(self, token, ref, feature_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_proteins', TMessageType.CALL, self._seqid)
    args = get_proteins_args()
    args.token = token
    args.ref = ref
    args.feature_id_list = feature_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_proteins(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_proteins_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_proteins failed: unknown result"))

  def get_feature_locations(self, token, ref, feature_id_list):
    """
    Retrieve Feature locations in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_locations, token, ref, feature_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_feature_locations,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_locations,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_locations(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_locations(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_locations(self, token, ref, feature_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_locations', TMessageType.CALL, self._seqid)
    args = get_feature_locations_args()
    args.token = token
    args.ref = ref
    args.feature_id_list = feature_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_locations(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_locations_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_locations failed: unknown result"))

  def get_feature_publications(self, token, ref, feature_id_list):
    """
    Retrieve Feature publications in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_publications, token, ref, feature_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_feature_publications,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_publications,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_publications(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_publications(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_publications(self, token, ref, feature_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_publications', TMessageType.CALL, self._seqid)
    args = get_feature_publications_args()
    args.token = token
    args.ref = ref
    args.feature_id_list = feature_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_publications(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_publications_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_publications failed: unknown result"))

  def get_feature_dna(self, token, ref, feature_id_list):
    """
    Retrieve Feature DNA sequences in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_dna, token, ref, feature_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_feature_dna,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_dna,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_dna(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_dna(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_dna(self, token, ref, feature_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_dna', TMessageType.CALL, self._seqid)
    args = get_feature_dna_args()
    args.token = token
    args.ref = ref
    args.feature_id_list = feature_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_dna(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_dna_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_dna failed: unknown result"))

  def get_feature_functions(self, token, ref, feature_id_list):
    """
    Retrieve Feature functions in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_functions, token, ref, feature_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_feature_functions,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_functions,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_functions(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_functions(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_functions(self, token, ref, feature_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_functions', TMessageType.CALL, self._seqid)
    args = get_feature_functions_args()
    args.token = token
    args.ref = ref
    args.feature_id_list = feature_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_functions(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_functions_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_functions failed: unknown result"))

  def get_feature_aliases(self, token, ref, feature_id_list):
    """
    Retrieve Feature aliases in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - feature_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_feature_aliases, token, ref, feature_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_feature_aliases,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_feature_aliases,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_feature_aliases(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_feature_aliases(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_feature_aliases(self, token, ref, feature_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_feature_aliases', TMessageType.CALL, self._seqid)
    args = get_feature_aliases_args()
    args.token = token
    args.ref = ref
    args.feature_id_list = feature_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_feature_aliases(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_feature_aliases_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_feature_aliases failed: unknown result"))

  def get_cds_by_gene(self, token, ref, gene_id_list):
    """
    Retrieve the CDS id for each Gene id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - gene_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_cds_by_gene, token, ref, gene_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_cds_by_gene,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_cds_by_gene,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_cds_by_gene(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_cds_by_gene(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_cds_by_gene(self, token, ref, gene_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_cds_by_gene', TMessageType.CALL, self._seqid)
    args = get_cds_by_gene_args()
    args.token = token
    args.ref = ref
    args.gene_id_list = gene_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_cds_by_gene(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_cds_by_gene_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_cds_by_gene failed: unknown result"))

  def get_cds_by_mrna(self, token, ref, mrna_id_list):
    """
    Retrieve the CDS id for each mRNA id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - mrna_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_cds_by_mrna, token, ref, mrna_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_cds_by_mrna,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_cds_by_mrna,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_cds_by_mrna(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_cds_by_mrna(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_cds_by_mrna(self, token, ref, mrna_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_cds_by_mrna', TMessageType.CALL, self._seqid)
    args = get_cds_by_mrna_args()
    args.token = token
    args.ref = ref
    args.mrna_id_list = mrna_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_cds_by_mrna(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_cds_by_mrna_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_cds_by_mrna failed: unknown result"))

  def get_gene_by_cds(self, token, ref, cds_id_list):
    """
    Retrieve the Gene id for each CDS id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - cds_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_gene_by_cds, token, ref, cds_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_gene_by_cds,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_gene_by_cds,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_gene_by_cds(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_gene_by_cds(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_gene_by_cds(self, token, ref, cds_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_gene_by_cds', TMessageType.CALL, self._seqid)
    args = get_gene_by_cds_args()
    args.token = token
    args.ref = ref
    args.cds_id_list = cds_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_gene_by_cds(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_gene_by_cds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_gene_by_cds failed: unknown result"))

  def get_gene_by_mrna(self, token, ref, mrna_id_list):
    """
    Retrieve the Gene id for each mRNA id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - mrna_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_gene_by_mrna, token, ref, mrna_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_gene_by_mrna,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_gene_by_mrna,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_gene_by_mrna(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_gene_by_mrna(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_gene_by_mrna(self, token, ref, mrna_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_gene_by_mrna', TMessageType.CALL, self._seqid)
    args = get_gene_by_mrna_args()
    args.token = token
    args.ref = ref
    args.mrna_id_list = mrna_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_gene_by_mrna(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_gene_by_mrna_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_gene_by_mrna failed: unknown result"))

  def get_mrna_by_cds(self, token, ref, gene_id_list):
    """
    Retrieve the mRNA id for each CDS id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - gene_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_mrna_by_cds, token, ref, gene_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_mrna_by_cds,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_mrna_by_cds,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_mrna_by_cds(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_mrna_by_cds(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_mrna_by_cds(self, token, ref, gene_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_mrna_by_cds', TMessageType.CALL, self._seqid)
    args = get_mrna_by_cds_args()
    args.token = token
    args.ref = ref
    args.gene_id_list = gene_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_mrna_by_cds(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_mrna_by_cds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_mrna_by_cds failed: unknown result"))

  def get_mrna_by_gene(self, token, ref, gene_id_list):
    """
    Retrieve the mRNA id for each Gene id in this GenomeAnnotation.


    Parameters:
     - token
     - ref
     - gene_id_list
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_mrna_by_gene, token, ref, gene_id_list)
    d.addCallbacks(
      callback=self.cb_send_get_mrna_by_gene,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_mrna_by_gene,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_mrna_by_gene(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_mrna_by_gene(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_mrna_by_gene(self, token, ref, gene_id_list):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_mrna_by_gene', TMessageType.CALL, self._seqid)
    args = get_mrna_by_gene_args()
    args.token = token
    args.ref = ref
    args.gene_id_list = gene_id_list
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_mrna_by_gene(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_mrna_by_gene_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.generic_exception is not None:
      return d.errback(result.generic_exception)
    if result.authorization_exception is not None:
      return d.errback(result.authorization_exception)
    if result.authentication_exception is not None:
      return d.errback(result.authentication_exception)
    if result.reference_exception is not None:
      return d.errback(result.reference_exception)
    if result.attribute_exception is not None:
      return d.errback(result.attribute_exception)
    if result.type_exception is not None:
      return d.errback(result.type_exception)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_mrna_by_gene failed: unknown result"))


class Processor(TProcessor):
  implements(Iface)

  def __init__(self, handler):
    self._handler = Iface(handler)
    self._processMap = {}
    self._processMap["get_taxon"] = Processor.process_get_taxon
    self._processMap["get_assembly"] = Processor.process_get_assembly
    self._processMap["get_feature_types"] = Processor.process_get_feature_types
    self._processMap["get_feature_type_descriptions"] = Processor.process_get_feature_type_descriptions
    self._processMap["get_feature_type_counts"] = Processor.process_get_feature_type_counts
    self._processMap["get_feature_ids"] = Processor.process_get_feature_ids
    self._processMap["get_features"] = Processor.process_get_features
    self._processMap["get_proteins"] = Processor.process_get_proteins
    self._processMap["get_feature_locations"] = Processor.process_get_feature_locations
    self._processMap["get_feature_publications"] = Processor.process_get_feature_publications
    self._processMap["get_feature_dna"] = Processor.process_get_feature_dna
    self._processMap["get_feature_functions"] = Processor.process_get_feature_functions
    self._processMap["get_feature_aliases"] = Processor.process_get_feature_aliases
    self._processMap["get_cds_by_gene"] = Processor.process_get_cds_by_gene
    self._processMap["get_cds_by_mrna"] = Processor.process_get_cds_by_mrna
    self._processMap["get_gene_by_cds"] = Processor.process_get_gene_by_cds
    self._processMap["get_gene_by_mrna"] = Processor.process_get_gene_by_mrna
    self._processMap["get_mrna_by_cds"] = Processor.process_get_mrna_by_cds
    self._processMap["get_mrna_by_gene"] = Processor.process_get_mrna_by_gene

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return defer.succeed(None)
    else:
      return self._processMap[name](self, seqid, iprot, oprot)

  def process_get_taxon(self, seqid, iprot, oprot):
    args = get_taxon_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_taxon_result()
    d = defer.maybeDeferred(self._handler.get_taxon, args.token, args.ref)
    d.addCallback(self.write_results_success_get_taxon, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_taxon, result, seqid, oprot)
    return d

  def write_results_success_get_taxon(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_taxon", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_taxon(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_taxon", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_assembly(self, seqid, iprot, oprot):
    args = get_assembly_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_assembly_result()
    d = defer.maybeDeferred(self._handler.get_assembly, args.token, args.ref)
    d.addCallback(self.write_results_success_get_assembly, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_assembly, result, seqid, oprot)
    return d

  def write_results_success_get_assembly(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_assembly", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_assembly(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_assembly", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_types(self, seqid, iprot, oprot):
    args = get_feature_types_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_types_result()
    d = defer.maybeDeferred(self._handler.get_feature_types, args.token, args.ref)
    d.addCallback(self.write_results_success_get_feature_types, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_types, result, seqid, oprot)
    return d

  def write_results_success_get_feature_types(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_types", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_types(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_types", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_type_descriptions(self, seqid, iprot, oprot):
    args = get_feature_type_descriptions_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_type_descriptions_result()
    d = defer.maybeDeferred(self._handler.get_feature_type_descriptions, args.token, args.ref, args.feature_type_list)
    d.addCallback(self.write_results_success_get_feature_type_descriptions, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_type_descriptions, result, seqid, oprot)
    return d

  def write_results_success_get_feature_type_descriptions(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_type_descriptions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_type_descriptions(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_type_descriptions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_type_counts(self, seqid, iprot, oprot):
    args = get_feature_type_counts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_type_counts_result()
    d = defer.maybeDeferred(self._handler.get_feature_type_counts, args.token, args.ref, args.feature_type_list)
    d.addCallback(self.write_results_success_get_feature_type_counts, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_type_counts, result, seqid, oprot)
    return d

  def write_results_success_get_feature_type_counts(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_type_counts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_type_counts(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_type_counts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_ids(self, seqid, iprot, oprot):
    args = get_feature_ids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_ids_result()
    d = defer.maybeDeferred(self._handler.get_feature_ids, args.token, args.ref, args.feature_type_list, args.region_list, args.function_list, args.alias_list)
    d.addCallback(self.write_results_success_get_feature_ids, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_ids, result, seqid, oprot)
    return d

  def write_results_success_get_feature_ids(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_ids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_ids(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_ids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_features(self, seqid, iprot, oprot):
    args = get_features_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_features_result()
    d = defer.maybeDeferred(self._handler.get_features, args.token, args.ref, args.feature_id_list)
    d.addCallback(self.write_results_success_get_features, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_features, result, seqid, oprot)
    return d

  def write_results_success_get_features(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_features", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_features(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_features", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_proteins(self, seqid, iprot, oprot):
    args = get_proteins_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_proteins_result()
    d = defer.maybeDeferred(self._handler.get_proteins, args.token, args.ref, args.feature_id_list)
    d.addCallback(self.write_results_success_get_proteins, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_proteins, result, seqid, oprot)
    return d

  def write_results_success_get_proteins(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_proteins", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_proteins(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_proteins", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_locations(self, seqid, iprot, oprot):
    args = get_feature_locations_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_locations_result()
    d = defer.maybeDeferred(self._handler.get_feature_locations, args.token, args.ref, args.feature_id_list)
    d.addCallback(self.write_results_success_get_feature_locations, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_locations, result, seqid, oprot)
    return d

  def write_results_success_get_feature_locations(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_locations", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_locations(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_locations", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_publications(self, seqid, iprot, oprot):
    args = get_feature_publications_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_publications_result()
    d = defer.maybeDeferred(self._handler.get_feature_publications, args.token, args.ref, args.feature_id_list)
    d.addCallback(self.write_results_success_get_feature_publications, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_publications, result, seqid, oprot)
    return d

  def write_results_success_get_feature_publications(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_publications", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_publications(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_publications", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_dna(self, seqid, iprot, oprot):
    args = get_feature_dna_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_dna_result()
    d = defer.maybeDeferred(self._handler.get_feature_dna, args.token, args.ref, args.feature_id_list)
    d.addCallback(self.write_results_success_get_feature_dna, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_dna, result, seqid, oprot)
    return d

  def write_results_success_get_feature_dna(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_dna", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_dna(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_dna", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_functions(self, seqid, iprot, oprot):
    args = get_feature_functions_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_functions_result()
    d = defer.maybeDeferred(self._handler.get_feature_functions, args.token, args.ref, args.feature_id_list)
    d.addCallback(self.write_results_success_get_feature_functions, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_functions, result, seqid, oprot)
    return d

  def write_results_success_get_feature_functions(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_functions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_functions(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_functions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_feature_aliases(self, seqid, iprot, oprot):
    args = get_feature_aliases_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_feature_aliases_result()
    d = defer.maybeDeferred(self._handler.get_feature_aliases, args.token, args.ref, args.feature_id_list)
    d.addCallback(self.write_results_success_get_feature_aliases, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_feature_aliases, result, seqid, oprot)
    return d

  def write_results_success_get_feature_aliases(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_feature_aliases", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_feature_aliases(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_feature_aliases", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_cds_by_gene(self, seqid, iprot, oprot):
    args = get_cds_by_gene_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_cds_by_gene_result()
    d = defer.maybeDeferred(self._handler.get_cds_by_gene, args.token, args.ref, args.gene_id_list)
    d.addCallback(self.write_results_success_get_cds_by_gene, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_cds_by_gene, result, seqid, oprot)
    return d

  def write_results_success_get_cds_by_gene(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_cds_by_gene", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_cds_by_gene(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_cds_by_gene", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_cds_by_mrna(self, seqid, iprot, oprot):
    args = get_cds_by_mrna_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_cds_by_mrna_result()
    d = defer.maybeDeferred(self._handler.get_cds_by_mrna, args.token, args.ref, args.mrna_id_list)
    d.addCallback(self.write_results_success_get_cds_by_mrna, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_cds_by_mrna, result, seqid, oprot)
    return d

  def write_results_success_get_cds_by_mrna(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_cds_by_mrna", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_cds_by_mrna(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_cds_by_mrna", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_gene_by_cds(self, seqid, iprot, oprot):
    args = get_gene_by_cds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_gene_by_cds_result()
    d = defer.maybeDeferred(self._handler.get_gene_by_cds, args.token, args.ref, args.cds_id_list)
    d.addCallback(self.write_results_success_get_gene_by_cds, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_gene_by_cds, result, seqid, oprot)
    return d

  def write_results_success_get_gene_by_cds(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_gene_by_cds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_gene_by_cds(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_gene_by_cds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_gene_by_mrna(self, seqid, iprot, oprot):
    args = get_gene_by_mrna_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_gene_by_mrna_result()
    d = defer.maybeDeferred(self._handler.get_gene_by_mrna, args.token, args.ref, args.mrna_id_list)
    d.addCallback(self.write_results_success_get_gene_by_mrna, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_gene_by_mrna, result, seqid, oprot)
    return d

  def write_results_success_get_gene_by_mrna(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_gene_by_mrna", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_gene_by_mrna(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_gene_by_mrna", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_mrna_by_cds(self, seqid, iprot, oprot):
    args = get_mrna_by_cds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_mrna_by_cds_result()
    d = defer.maybeDeferred(self._handler.get_mrna_by_cds, args.token, args.ref, args.gene_id_list)
    d.addCallback(self.write_results_success_get_mrna_by_cds, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_mrna_by_cds, result, seqid, oprot)
    return d

  def write_results_success_get_mrna_by_cds(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_mrna_by_cds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_mrna_by_cds(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_mrna_by_cds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_mrna_by_gene(self, seqid, iprot, oprot):
    args = get_mrna_by_gene_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_mrna_by_gene_result()
    d = defer.maybeDeferred(self._handler.get_mrna_by_gene, args.token, args.ref, args.gene_id_list)
    d.addCallback(self.write_results_success_get_mrna_by_gene, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_mrna_by_gene, result, seqid, oprot)
    return d

  def write_results_success_get_mrna_by_gene(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_mrna_by_gene", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_mrna_by_gene(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServiceException, generic_exception:
      result.generic_exception = generic_exception
    except AuthorizationException, authorization_exception:
      result.authorization_exception = authorization_exception
    except AuthenticationException, authentication_exception:
      result.authentication_exception = authentication_exception
    except ObjectReferenceException, reference_exception:
      result.reference_exception = reference_exception
    except AttributeException, attribute_exception:
      result.attribute_exception = attribute_exception
    except TypeException, type_exception:
      result.type_exception = type_exception
    oprot.writeMessageBegin("get_mrna_by_gene", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_taxon_args:
  """
  Attributes:
   - token
   - ref
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
  )

  def __init__(self, token=None, ref=None,):
    self.token = token
    self.ref = ref

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_taxon_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_taxon_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_taxon_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_assembly_args:
  """
  Attributes:
   - token
   - ref
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
  )

  def __init__(self, token=None, ref=None,):
    self.token = token
    self.ref = ref

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_assembly_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_assembly_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_assembly_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_types_args:
  """
  Attributes:
   - token
   - ref
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
  )

  def __init__(self, token=None, ref=None,):
    self.token = token
    self.ref = ref

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_types_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_types_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readString();
            self.success.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_types_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter22 in self.success:
        oprot.writeString(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_type_descriptions_args:
  """
  Attributes:
   - token
   - ref
   - feature_type_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_type_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_type_list=None,):
    self.token = token
    self.ref = ref
    self.feature_type_list = feature_type_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_type_list = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readString();
            self.feature_type_list.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_type_descriptions_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_type_list is not None:
      oprot.writeFieldBegin('feature_type_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_type_list))
      for iter29 in self.feature_type_list:
        oprot.writeString(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_type_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_type_descriptions_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype31, _vtype32, _size30 ) = iprot.readMapBegin()
          for _i34 in xrange(_size30):
            _key35 = iprot.readString();
            _val36 = iprot.readString();
            self.success[_key35] = _val36
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_type_descriptions_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter37,viter38 in self.success.items():
        oprot.writeString(kiter37)
        oprot.writeString(viter38)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_type_counts_args:
  """
  Attributes:
   - token
   - ref
   - feature_type_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_type_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_type_list=None,):
    self.token = token
    self.ref = ref
    self.feature_type_list = feature_type_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_type_list = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = iprot.readString();
            self.feature_type_list.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_type_counts_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_type_list is not None:
      oprot.writeFieldBegin('feature_type_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_type_list))
      for iter45 in self.feature_type_list:
        oprot.writeString(iter45)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_type_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_type_counts_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype47, _vtype48, _size46 ) = iprot.readMapBegin()
          for _i50 in xrange(_size46):
            _key51 = iprot.readString();
            _val52 = iprot.readI64();
            self.success[_key51] = _val52
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_type_counts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.success))
      for kiter53,viter54 in self.success.items():
        oprot.writeString(kiter53)
        oprot.writeI64(viter54)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_ids_args:
  """
  Attributes:
   - token
   - ref
   - feature_type_list
   - region_list
   - function_list
   - alias_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_type_list', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'region_list', (TType.STRUCT,(Region, Region.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'function_list', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'alias_list', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, token=None, ref=None, feature_type_list=None, region_list=None, function_list=None, alias_list=None,):
    self.token = token
    self.ref = ref
    self.feature_type_list = feature_type_list
    self.region_list = region_list
    self.function_list = function_list
    self.alias_list = alias_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_type_list = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readString();
            self.feature_type_list.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.region_list = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = Region()
            _elem66.read(iprot)
            self.region_list.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.function_list = []
          (_etype70, _size67) = iprot.readListBegin()
          for _i71 in xrange(_size67):
            _elem72 = iprot.readString();
            self.function_list.append(_elem72)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.alias_list = []
          (_etype76, _size73) = iprot.readListBegin()
          for _i77 in xrange(_size73):
            _elem78 = iprot.readString();
            self.alias_list.append(_elem78)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_ids_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_type_list is not None:
      oprot.writeFieldBegin('feature_type_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_type_list))
      for iter79 in self.feature_type_list:
        oprot.writeString(iter79)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.region_list is not None:
      oprot.writeFieldBegin('region_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.region_list))
      for iter80 in self.region_list:
        iter80.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.function_list is not None:
      oprot.writeFieldBegin('function_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.function_list))
      for iter81 in self.function_list:
        oprot.writeString(iter81)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.alias_list is not None:
      oprot.writeFieldBegin('alias_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.alias_list))
      for iter82 in self.alias_list:
        oprot.writeString(iter82)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_type_list)
    value = (value * 31) ^ hash(self.region_list)
    value = (value * 31) ^ hash(self.function_list)
    value = (value * 31) ^ hash(self.alias_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_ids_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype84, _vtype85, _size83 ) = iprot.readMapBegin()
          for _i87 in xrange(_size83):
            _key88 = iprot.readString();
            _val89 = {}
            (_ktype91, _vtype92, _size90 ) = iprot.readMapBegin()
            for _i94 in xrange(_size90):
              _key95 = iprot.readString();
              _val96 = iprot.readString();
              _val89[_key95] = _val96
            iprot.readMapEnd()
            self.success[_key88] = _val89
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_ids_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter97,viter98 in self.success.items():
        oprot.writeString(kiter97)
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter98))
        for kiter99,viter100 in viter98.items():
          oprot.writeString(kiter99)
          oprot.writeString(viter100)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_features_args:
  """
  Attributes:
   - token
   - ref
   - feature_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_id_list=None,):
    self.token = token
    self.ref = ref
    self.feature_id_list = feature_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_id_list = []
          (_etype104, _size101) = iprot.readListBegin()
          for _i105 in xrange(_size101):
            _elem106 = iprot.readString();
            self.feature_id_list.append(_elem106)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_features_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_id_list is not None:
      oprot.writeFieldBegin('feature_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_id_list))
      for iter107 in self.feature_id_list:
        oprot.writeString(iter107)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_features_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype109, _vtype110, _size108 ) = iprot.readMapBegin()
          for _i112 in xrange(_size108):
            _key113 = iprot.readString();
            _val114 = iprot.readString();
            self.success[_key113] = _val114
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_features_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter115,viter116 in self.success.items():
        oprot.writeString(kiter115)
        oprot.writeString(viter116)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_proteins_args:
  """
  Attributes:
   - token
   - ref
   - feature_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_id_list=None,):
    self.token = token
    self.ref = ref
    self.feature_id_list = feature_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_id_list = []
          (_etype120, _size117) = iprot.readListBegin()
          for _i121 in xrange(_size117):
            _elem122 = iprot.readString();
            self.feature_id_list.append(_elem122)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_proteins_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_id_list is not None:
      oprot.writeFieldBegin('feature_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_id_list))
      for iter123 in self.feature_id_list:
        oprot.writeString(iter123)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_proteins_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype125, _vtype126, _size124 ) = iprot.readMapBegin()
          for _i128 in xrange(_size124):
            _key129 = iprot.readString();
            _val130 = iprot.readString();
            self.success[_key129] = _val130
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_proteins_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter131,viter132 in self.success.items():
        oprot.writeString(kiter131)
        oprot.writeString(viter132)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_locations_args:
  """
  Attributes:
   - token
   - ref
   - feature_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_id_list=None,):
    self.token = token
    self.ref = ref
    self.feature_id_list = feature_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_id_list = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = iprot.readString();
            self.feature_id_list.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_locations_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_id_list is not None:
      oprot.writeFieldBegin('feature_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_id_list))
      for iter139 in self.feature_id_list:
        oprot.writeString(iter139)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_locations_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRUCT,(Region, Region.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype141, _vtype142, _size140 ) = iprot.readMapBegin()
          for _i144 in xrange(_size140):
            _key145 = iprot.readString();
            _val146 = []
            (_etype150, _size147) = iprot.readListBegin()
            for _i151 in xrange(_size147):
              _elem152 = Region()
              _elem152.read(iprot)
              _val146.append(_elem152)
            iprot.readListEnd()
            self.success[_key145] = _val146
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_locations_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.success))
      for kiter153,viter154 in self.success.items():
        oprot.writeString(kiter153)
        oprot.writeListBegin(TType.STRUCT, len(viter154))
        for iter155 in viter154:
          iter155.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_publications_args:
  """
  Attributes:
   - token
   - ref
   - feature_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_id_list=None,):
    self.token = token
    self.ref = ref
    self.feature_id_list = feature_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_id_list = []
          (_etype159, _size156) = iprot.readListBegin()
          for _i160 in xrange(_size156):
            _elem161 = iprot.readString();
            self.feature_id_list.append(_elem161)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_publications_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_id_list is not None:
      oprot.writeFieldBegin('feature_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_id_list))
      for iter162 in self.feature_id_list:
        oprot.writeString(iter162)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_publications_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype164, _vtype165, _size163 ) = iprot.readMapBegin()
          for _i167 in xrange(_size163):
            _key168 = iprot.readString();
            _val169 = iprot.readString();
            self.success[_key168] = _val169
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_publications_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter170,viter171 in self.success.items():
        oprot.writeString(kiter170)
        oprot.writeString(viter171)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_dna_args:
  """
  Attributes:
   - token
   - ref
   - feature_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_id_list=None,):
    self.token = token
    self.ref = ref
    self.feature_id_list = feature_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_id_list = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in xrange(_size172):
            _elem177 = iprot.readString();
            self.feature_id_list.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_dna_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_id_list is not None:
      oprot.writeFieldBegin('feature_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_id_list))
      for iter178 in self.feature_id_list:
        oprot.writeString(iter178)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_dna_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype180, _vtype181, _size179 ) = iprot.readMapBegin()
          for _i183 in xrange(_size179):
            _key184 = iprot.readString();
            _val185 = iprot.readString();
            self.success[_key184] = _val185
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_dna_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter186,viter187 in self.success.items():
        oprot.writeString(kiter186)
        oprot.writeString(viter187)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_functions_args:
  """
  Attributes:
   - token
   - ref
   - feature_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_id_list=None,):
    self.token = token
    self.ref = ref
    self.feature_id_list = feature_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_id_list = []
          (_etype191, _size188) = iprot.readListBegin()
          for _i192 in xrange(_size188):
            _elem193 = iprot.readString();
            self.feature_id_list.append(_elem193)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_functions_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_id_list is not None:
      oprot.writeFieldBegin('feature_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_id_list))
      for iter194 in self.feature_id_list:
        oprot.writeString(iter194)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_functions_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype196, _vtype197, _size195 ) = iprot.readMapBegin()
          for _i199 in xrange(_size195):
            _key200 = iprot.readString();
            _val201 = iprot.readString();
            self.success[_key200] = _val201
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_functions_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter202,viter203 in self.success.items():
        oprot.writeString(kiter202)
        oprot.writeString(viter203)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_aliases_args:
  """
  Attributes:
   - token
   - ref
   - feature_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'feature_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, feature_id_list=None,):
    self.token = token
    self.ref = ref
    self.feature_id_list = feature_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.feature_id_list = []
          (_etype207, _size204) = iprot.readListBegin()
          for _i208 in xrange(_size204):
            _elem209 = iprot.readString();
            self.feature_id_list.append(_elem209)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_aliases_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.feature_id_list is not None:
      oprot.writeFieldBegin('feature_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.feature_id_list))
      for iter210 in self.feature_id_list:
        oprot.writeString(iter210)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.feature_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_feature_aliases_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype212, _vtype213, _size211 ) = iprot.readMapBegin()
          for _i215 in xrange(_size211):
            _key216 = iprot.readString();
            _val217 = []
            (_etype221, _size218) = iprot.readListBegin()
            for _i222 in xrange(_size218):
              _elem223 = iprot.readString();
              _val217.append(_elem223)
            iprot.readListEnd()
            self.success[_key216] = _val217
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_feature_aliases_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.success))
      for kiter224,viter225 in self.success.items():
        oprot.writeString(kiter224)
        oprot.writeListBegin(TType.STRING, len(viter225))
        for iter226 in viter225:
          oprot.writeString(iter226)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cds_by_gene_args:
  """
  Attributes:
   - token
   - ref
   - gene_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'gene_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, gene_id_list=None,):
    self.token = token
    self.ref = ref
    self.gene_id_list = gene_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.gene_id_list = []
          (_etype230, _size227) = iprot.readListBegin()
          for _i231 in xrange(_size227):
            _elem232 = iprot.readString();
            self.gene_id_list.append(_elem232)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cds_by_gene_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.gene_id_list is not None:
      oprot.writeFieldBegin('gene_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.gene_id_list))
      for iter233 in self.gene_id_list:
        oprot.writeString(iter233)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.gene_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cds_by_gene_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype235, _vtype236, _size234 ) = iprot.readMapBegin()
          for _i238 in xrange(_size234):
            _key239 = iprot.readString();
            _val240 = iprot.readString();
            self.success[_key239] = _val240
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cds_by_gene_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter241,viter242 in self.success.items():
        oprot.writeString(kiter241)
        oprot.writeString(viter242)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cds_by_mrna_args:
  """
  Attributes:
   - token
   - ref
   - mrna_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'mrna_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, mrna_id_list=None,):
    self.token = token
    self.ref = ref
    self.mrna_id_list = mrna_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.mrna_id_list = []
          (_etype246, _size243) = iprot.readListBegin()
          for _i247 in xrange(_size243):
            _elem248 = iprot.readString();
            self.mrna_id_list.append(_elem248)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cds_by_mrna_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.mrna_id_list is not None:
      oprot.writeFieldBegin('mrna_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.mrna_id_list))
      for iter249 in self.mrna_id_list:
        oprot.writeString(iter249)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.mrna_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cds_by_mrna_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype251, _vtype252, _size250 ) = iprot.readMapBegin()
          for _i254 in xrange(_size250):
            _key255 = iprot.readString();
            _val256 = iprot.readString();
            self.success[_key255] = _val256
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cds_by_mrna_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter257,viter258 in self.success.items():
        oprot.writeString(kiter257)
        oprot.writeString(viter258)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_gene_by_cds_args:
  """
  Attributes:
   - token
   - ref
   - cds_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'cds_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, cds_id_list=None,):
    self.token = token
    self.ref = ref
    self.cds_id_list = cds_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cds_id_list = []
          (_etype262, _size259) = iprot.readListBegin()
          for _i263 in xrange(_size259):
            _elem264 = iprot.readString();
            self.cds_id_list.append(_elem264)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_gene_by_cds_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.cds_id_list is not None:
      oprot.writeFieldBegin('cds_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.cds_id_list))
      for iter265 in self.cds_id_list:
        oprot.writeString(iter265)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.cds_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_gene_by_cds_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype267, _vtype268, _size266 ) = iprot.readMapBegin()
          for _i270 in xrange(_size266):
            _key271 = iprot.readString();
            _val272 = iprot.readString();
            self.success[_key271] = _val272
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_gene_by_cds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter273,viter274 in self.success.items():
        oprot.writeString(kiter273)
        oprot.writeString(viter274)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_gene_by_mrna_args:
  """
  Attributes:
   - token
   - ref
   - mrna_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'mrna_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, mrna_id_list=None,):
    self.token = token
    self.ref = ref
    self.mrna_id_list = mrna_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.mrna_id_list = []
          (_etype278, _size275) = iprot.readListBegin()
          for _i279 in xrange(_size275):
            _elem280 = iprot.readString();
            self.mrna_id_list.append(_elem280)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_gene_by_mrna_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.mrna_id_list is not None:
      oprot.writeFieldBegin('mrna_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.mrna_id_list))
      for iter281 in self.mrna_id_list:
        oprot.writeString(iter281)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.mrna_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_gene_by_mrna_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype283, _vtype284, _size282 ) = iprot.readMapBegin()
          for _i286 in xrange(_size282):
            _key287 = iprot.readString();
            _val288 = iprot.readString();
            self.success[_key287] = _val288
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_gene_by_mrna_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter289,viter290 in self.success.items():
        oprot.writeString(kiter289)
        oprot.writeString(viter290)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_mrna_by_cds_args:
  """
  Attributes:
   - token
   - ref
   - gene_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'gene_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, gene_id_list=None,):
    self.token = token
    self.ref = ref
    self.gene_id_list = gene_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.gene_id_list = []
          (_etype294, _size291) = iprot.readListBegin()
          for _i295 in xrange(_size291):
            _elem296 = iprot.readString();
            self.gene_id_list.append(_elem296)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_mrna_by_cds_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.gene_id_list is not None:
      oprot.writeFieldBegin('gene_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.gene_id_list))
      for iter297 in self.gene_id_list:
        oprot.writeString(iter297)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.gene_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_mrna_by_cds_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype299, _vtype300, _size298 ) = iprot.readMapBegin()
          for _i302 in xrange(_size298):
            _key303 = iprot.readString();
            _val304 = iprot.readString();
            self.success[_key303] = _val304
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_mrna_by_cds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter305,viter306 in self.success.items():
        oprot.writeString(kiter305)
        oprot.writeString(viter306)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_mrna_by_gene_args:
  """
  Attributes:
   - token
   - ref
   - gene_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'ref', None, None, ), # 2
    (3, TType.LIST, 'gene_id_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, token=None, ref=None, gene_id_list=None,):
    self.token = token
    self.ref = ref
    self.gene_id_list = gene_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ref = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.gene_id_list = []
          (_etype310, _size307) = iprot.readListBegin()
          for _i311 in xrange(_size307):
            _elem312 = iprot.readString();
            self.gene_id_list.append(_elem312)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_mrna_by_gene_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ref is not None:
      oprot.writeFieldBegin('ref', TType.STRING, 2)
      oprot.writeString(self.ref)
      oprot.writeFieldEnd()
    if self.gene_id_list is not None:
      oprot.writeFieldBegin('gene_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.gene_id_list))
      for iter313 in self.gene_id_list:
        oprot.writeString(iter313)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    if self.ref is None:
      raise TProtocol.TProtocolException(message='Required field ref is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ref)
    value = (value * 31) ^ hash(self.gene_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_mrna_by_gene_result:
  """
  Attributes:
   - success
   - generic_exception
   - authorization_exception
   - authentication_exception
   - reference_exception
   - attribute_exception
   - type_exception
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'generic_exception', (ServiceException, ServiceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'authorization_exception', (AuthorizationException, AuthorizationException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'authentication_exception', (AuthenticationException, AuthenticationException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'reference_exception', (ObjectReferenceException, ObjectReferenceException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'attribute_exception', (AttributeException, AttributeException.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'type_exception', (TypeException, TypeException.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, generic_exception=None, authorization_exception=None, authentication_exception=None, reference_exception=None, attribute_exception=None, type_exception=None,):
    self.success = success
    self.generic_exception = generic_exception
    self.authorization_exception = authorization_exception
    self.authentication_exception = authentication_exception
    self.reference_exception = reference_exception
    self.attribute_exception = attribute_exception
    self.type_exception = type_exception

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype315, _vtype316, _size314 ) = iprot.readMapBegin()
          for _i318 in xrange(_size314):
            _key319 = iprot.readString();
            _val320 = iprot.readString();
            self.success[_key319] = _val320
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.generic_exception = ServiceException()
          self.generic_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.authorization_exception = AuthorizationException()
          self.authorization_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.authentication_exception = AuthenticationException()
          self.authentication_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reference_exception = ObjectReferenceException()
          self.reference_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attribute_exception = AttributeException()
          self.attribute_exception.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.type_exception = TypeException()
          self.type_exception.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_mrna_by_gene_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter321,viter322 in self.success.items():
        oprot.writeString(kiter321)
        oprot.writeString(viter322)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.generic_exception is not None:
      oprot.writeFieldBegin('generic_exception', TType.STRUCT, 1)
      self.generic_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authorization_exception is not None:
      oprot.writeFieldBegin('authorization_exception', TType.STRUCT, 2)
      self.authorization_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.authentication_exception is not None:
      oprot.writeFieldBegin('authentication_exception', TType.STRUCT, 3)
      self.authentication_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.reference_exception is not None:
      oprot.writeFieldBegin('reference_exception', TType.STRUCT, 4)
      self.reference_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.attribute_exception is not None:
      oprot.writeFieldBegin('attribute_exception', TType.STRUCT, 5)
      self.attribute_exception.write(oprot)
      oprot.writeFieldEnd()
    if self.type_exception is not None:
      oprot.writeFieldBegin('type_exception', TType.STRUCT, 6)
      self.type_exception.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.generic_exception)
    value = (value * 31) ^ hash(self.authorization_exception)
    value = (value * 31) ^ hash(self.authentication_exception)
    value = (value * 31) ^ hash(self.reference_exception)
    value = (value * 31) ^ hash(self.attribute_exception)
    value = (value * 31) ^ hash(self.type_exception)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
